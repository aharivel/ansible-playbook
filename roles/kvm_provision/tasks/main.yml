---
# tasks file for kvm_provision
- name: Ensure requirements in place
  package:
    name:
      - guestfs-tools
      - python3-libvirt
    state: present
  become: yes

- name: Get VMs list
  community.libvirt.virt:
    command: list_vms
  register: existing_vms
  changed_when: no

- name: Create VM if not exists
  block:
    - name: Check if file exists in /tmp
      stat:
        path: "/tmp/{{ base_image_name }}"
      register: file_info

    - name: Set flag to skip download if file exists
      set_fact:
        skip_download: true
      when: file_info.stat.exists

    - name: Download base image
      get_url:
        url: "{{ base_image_url }}"
        dest: "/tmp/{{ base_image_name }}"
      when: file_info.stat.exists == False

    - name: Download checksum file
      get_url:
        url: "{{ base_image_sha }}"
        dest: "/tmp/{{ base_image_name }}.SHA256"

    - name: Verify downloaded image against checksum
      shell: "sha256sum -c {{ base_image_name }}.SHA256"
      args:
        chdir: "/tmp"
      register: checksum_result
      changed_when: false
      ignore_errors: true

    - name: Fail if checksum verification fails
      fail:
        msg: "Checksum verification failed for the downloaded image."
      when: checksum_result.rc != 0

    - name: Create a larger QCOW2 image
      command: "qemu-img create -f qcow2 -b /tmp/{{ base_image_name }} -F qcow2 /tmp/{{ vm_name }}.qcow2 10G"

    - name: Copy base image to libvirt directory
      copy:
        src: "/tmp/{{ vm_name }}.qcow2"
        dest: "{{ libvirt_pool_dir }}/{{ vm_name }}.qcow2"
        force: no
        remote_src: yes
        mode: 0660
      register: copy_results

    - name: Change to QEMU user
      command: "chown qemu: {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2"

    - name: Configure the image
      command: |
        virt-customize -a {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2 \
        --hostname {{ vm_name }} \
        --root-password password:{{ vm_root_pass }} \
        --ssh-inject 'root:file:{{ ssh_key }}' \
        --uninstall cloud-init \
        --run-command 'setenforce 0 || :' \
        --run-command 'sed -i "s/^SELINUX=.*/SELINUX=permissive/" /etc/selinux/config' \
        --run-command 'dnf config-manager --set-enabled crb' \
        --run-command 'dnf config-manager --set-enabled extras-common' \
        --install git,meson,ninja-build,python3-pyelftools,gcc,glibc-static,numactl-libs,numactl-devel,pciutils,tmux \
        --run-command 'grubby --update-kernel=ALL --args="iommu=pt intel_iommu=on default_hugepagesz=1G hugepagesz=1G hugepages=4"' \
        --run-command 'grub2-mkconfig -o /etc/grub2.cfg'
      when: copy_results is changed

    - name: Define vm
      community.libvirt.virt:
        command: define
        xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
  when: "vm_name not in existing_vms.list_vms"

- name: Ensure VM is started
  community.libvirt.virt:
    name: "{{ vm_name }}"
    state: running
  register: vm_start_results
  until: "vm_start_results is success"
  retries: 15
  delay: 2

- name: Ensure temporary file is deleted
  file:
    path: "/tmp/{{ base_image_name }}"
    state: absent
  when: cleanup_tmp | bool
